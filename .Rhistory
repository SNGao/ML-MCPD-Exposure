library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(e1071)
source('02_src/defined_functions.R')
data_All = read.csv('00_Data/process_MCPD_GLY_data.csv')
data_All$X = NULL; data_All$WEIGHT = NULL; data_All$NUMBER = NULL
data_All = data_All[,c(dim(data_All)[2], 1:(dim(data_All)[2]-1))]
Result_total = data.frame(model = c(0),
train_RMSE=c(0), train_R2=c(0), train_MAE=c(0),
test_RMSE=c(0), test_R2=c(0), test_MAE=c(0))
K = 5
train
set.seed(20240626)
folds <- createFolds(data_All$MCPD_GLY, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
fold.test <- data_All[folds[[i]], ]
fold.train <- data_All[-folds[[i]], ]
# Train model
model.mlr <- lm(MCPD_GLY~., data = fold.train)
# Performance for training set
trainpred <- predict(model.mlr, newdata = fold.train)
temp.train <- defaultSummary(data.frame(obs = fold.train$MCPD_GLY, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(model.mlr, newdata = fold.test)
temp.test <- defaultSummary(data.frame(obs = fold.test$MCPD_GLY, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
# Extract R2, RMSE, and MAE of the test set
R2_MLR1.test <- result.test$R2
RMSE_MLR1.test <- result.test$RMSE
MAE_MLR1.test <- result.test$MAE
R2_MLR1.train <- result.train$R2
RMSE_MLR1.train <- result.train$RMSE
MAE_MLR1.train <- result.train$MAE
Result_total[1, ] <- c(
'MLR1',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
set.seed(20240626)
folds <- createFolds(data_All$MCPD_GLY, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
fold.test <- data_All[folds[[i]], ]
fold.train <- data_All[-folds[[i]], ]
# Train model
model.gam <- lm(MCPD_GLY~ns(CREATININE, df = 2) +ns(HEIGHT, df = 2)
+ age
+ ns(BEANOILintake)
+ ns(PEANUTOIintake)
+ ns(LARDOILintake)
+ ns(MET, df = 2)
+ ns(DHPMA_a, df = 2)
+ ns(totalenergy, df = 2)
+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE
+ HBP+alcohol+education+db
, data = fold.train)
# Performance for training set
trainpred <- predict(model.gam, newdata = fold.train)
temp.train <- defaultSummary(data.frame(obs = fold.train$MCPD_GLY, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(model.gam, newdata = fold.test)
temp.test <- defaultSummary(data.frame(obs = fold.test$MCPD_GLY, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
# Extract R2, RMSE, and MAE of the test set
R2_GAM.train <- result.train$R2
RMSE_GAM.train <- result.train$RMSE
MAE_GAM.train <- result.train$MAE
R2_GAM.test <- result.test$R2
RMSE_GAM.test <- result.test$RMSE
MAE_GAM.test <- result.test$MAE
Result_total[2, ] <- c(
'GAM',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
set.seed(20240626)
folds <- createFolds(data_All$MCPD_GLY, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
fold.test <- data_All[folds[[i]], ]
fold.train <- data_All[-folds[[i]], ]
# Train model
model.svm <- svm(
x = fold.train[,-1],
y = fold.train$MCPD_GLY,
cost = best_params_svr$cost,
gamma = 1 / (ncol(X_train) * best_params_svr$gamma) ,
epsilon = best_params_svr$epsilon,
type = 'eps-regression'
)
# Performance for training set
trainpred <- predict(model.svm, newdata = fold.train[,-1])
temp.train <- defaultSummary(data.frame(obs = fold.train$MCPD_GLY, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(model.svm, newdata = fold.test[,-1])
temp.test <- defaultSummary(data.frame(obs = fold.test$MCPD_GLY, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
# Extract R2, RMSE, and MAE of the test set
R2_SVR.train <- result.train$R2
RMSE_SVR.train <- result.train$RMSE
MAE_SVR.train <- result.train$MAE
R2_SVR.test <- result.test$R2
RMSE_SVR.test <- result.test$RMSE
MAE_SVR.test <- result.test$MAE
Result_total[3, ] <- c(
'SVR',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
library(caret)
library(randomForest)
set.seed(20240626)
folds <- createFolds(y = data_All$MCPD_GLY, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
fold.test <- data_All[folds[[i]], ]
fold.train <- data_All[-folds[[i]], ]
# Train model
model.RF <- randomForest(
x = fold.train[,-1],
y = fold.train$MCPD_GLY,
mtry = best_params_rf$mtry,
ntree = best_params_rf$ntree,
maxnodes = best_params_rf$maxnodes,
nodesize = best_params_rf$nodesize,
importance = TRUE
)
# Performance for training set
trainpred <- predict(model.RF, newdata = fold.train[,-1])
temp.train <- defaultSummary(data.frame(obs = fold.train$MCPD_GLY, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(model.RF, newdata = fold.test[,-1])
temp.test <- defaultSummary(data.frame(obs = fold.test$MCPD_GLY, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
# Extract R2, RMSE, and MAE of the test set
R2_RF.train <- result.train$R2
RMSE_RF.train <- result.train$RMSE
MAE_RF.train <- result.train$MAE
R2_RF.test <- result.test$R2
RMSE_RF.test <- result.test$RMSE
MAE_RF.test <- result.test$MAE
Result_total[4, ] <- c(
'RF',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
library(lightgbm)
set.seed(20240626)
folds <- createFolds(y = data_All$MCPD_GLY, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
test <- data_All[folds[[i]], ]
train <- data_All[-folds[[i]], ]
data_trainx <- data.matrix(train[, -1])
data_trainy <- data.matrix(train$MCPD_GLY)
data_testx <- data.matrix(test[, -1])
data_testy <- data.matrix(test$MCPD_GLY)
# Create the LightGBM dataset
dtrain <- lgb.Dataset(data = data_trainx, label = data_trainy)
# Train Model
params <- list(
objective = 'regression_l2',
metric = 'rmse'
)
lgb1 <- lgb.train(data = dtrain,
params = best_param_lgb,
nrounds = best_iter_lgb,
verbose = -1,
obj = 'regression_l2'
)
# Performance for training set
trainpred <- predict(lgb1, data_trainx)
temp.train <- defaultSummary(data.frame(obs = data_trainy, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(lgb1, data_testx)
temp.test <- defaultSummary(data.frame(obs = test$MCPD_GLY, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
R2_LGBM.test <- result.test$R2
RMSE_LGBM.test <- result.test$RMSE
MAE_LGBM.test <- result.test$MAE
R2_LGBM.train <- result.train$R2
RMSE_LGBM.train <- result.train$RMSE
MAE_LGBM.train <- result.train$MAE
Result_total[5, ] <- c(
'LGBM',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
library(xgboost)
set.seed(20240626)
folds <- createFolds(y = data_All$MCPD_GLY, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
test <- data_All[folds[[i]], ]
train <- data_All[-folds[[i]], ]
data_trainx <- data.matrix(train[, -1])
data_trainy <- data.matrix(train$MCPD_GLY)
data_testx <- data.matrix(test[, -1])
data_testy <- data.matrix(test$MCPD_GLY)
# Create the XGBoost data matrix
dtrain <- xgb.DMatrix(data = data_trainx, label = data_trainy)
dtest <- xgb.DMatrix(data = data_testx, label = data_testy)
# Model Training
fit_xgb_reg <-xgb.train(data = dtrain,
params = best_param_xgb,
nrounds = best_iter_xgb,
verbose = 1
)
# Performance for training set
trainpred <- predict(fit_xgb_reg, newdata = data_trainx)
temp.train <- defaultSummary(data.frame(obs = data_trainy, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(fit_xgb_reg, newdata = data_testx)
temp.test <- defaultSummary(data.frame(obs = test$MCPD_GLY, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
R2_XGB.test <- result.test$R2
RMSE_XGB.test <- result.test$RMSE
MAE_XGB.test <- result.test$MAE
R2_XGB.train <- result.train$R2
RMSE_XGB.train <- result.train$RMSE
MAE_XGB.train <- result.train$MAE
Result_total[6, ] <- c(
'XGB',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
library(catboost)
set.seed(20240626)
folds <- createFolds(y = data_All$MCPD_GLY, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
fold.test <- data_All[folds[[i]], ]
fold.train <- data_All[-folds[[i]], ]
# Prepare the CatBoost data pool
train_pool <- catboost.load_pool(data = fold.train[, -1],
label = as.matrix(fold.train[, 1]))
test_pool <- catboost.load_pool(data = fold.test[, -1],
label = as.matrix(fold.test[, 1]))
# Set the parameters of the CatBoost model
output <- capture.output({
model.cat <- catboost.train(train_pool,
params = best_param_cat)
})
# Performance for training set
trainpred <- catboost.predict(model.cat, train_pool)
temp.train <- defaultSummary(data.frame(obs = fold.train$MCPD_GLY, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- catboost.predict(model.cat, test_pool)
temp.test <- defaultSummary(data.frame(obs = fold.test$MCPD_GLY, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
R2_CAT.test <- result.test$R2
RMSE_CAT.test <- result.test$RMSE
MAE_CAT.test <- result.test$MAE
R2_CAT.train <- result.train$R2
RMSE_CAT.train <- result.train$RMSE
MAE_CAT.train <- result.train$MAE
Result_total[7, ] <- c(
'CAT',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
write.csv(Result_total, '01_Output_Results/Final_CV_results.csv')
Result_total
Result.Rsquare.train <- data.frame(R2_MLR1.train, R2_GAM.train,
R2_SVR.train, R2_RF.train,
R2_CAT.train, R2_LGBM.train, R2_XGB.train)
Result.RMSE.train <- data.frame(RMSE_MLR1.train, RMSE_GAM.train,
RMSE_SVR.train, RMSE_RF.train,
RMSE_CAT.test, RMSE_LGBM.test, RMSE_XGB.test)
Result.MAE.train <- data.frame(MAE_MLR1.train, MAE_GAM.train,
MAE_SVR.train, MAE_RF.train,
MAE_CAT.train, MAE_LGBM.train, MAE_XGB.train)
Result.Rsquare.test <- data.frame(R2_MLR1.test, R2_GAM.test,
R2_SVR.test, R2_RF.test,
R2_CAT.test, R2_LGBM.test, R2_XGB.test)
Result.RMSE.test <- data.frame(RMSE_MLR1.test, RMSE_GAM.test,
RMSE_SVR.test, RMSE_RF.test,
RMSE_CAT.test, RMSE_LGBM.test, RMSE_XGB.test)
Result.MAE.test <- data.frame(MAE_MLR1.test, MAE_GAM.test,
MAE_SVR.test, MAE_RF.test,
MAE_CAT.test, MAE_LGBM.test, MAE_XGB.test)
write.csv(Result.Rsquare.train,'01_Output_Results/Final_train_CV_Rsquare.csv')
write.csv(Result.RMSE.train,'01_Output_Results/Final_train_CV_RMSE.csv')
write.csv(Result.MAE.train,'01_Output_Results/Final_train_CV_MAE.csv')
write.csv(Result.Rsquare.test,'01_Output_Results/Final_test_CV_Rsquare.csv')
write.csv(Result.RMSE.test,'01_Output_Results/Final_test_CV_RMSE.csv')
write.csv(Result.MAE.test,'01_Output_Results/Final_test_CV_MAE.csv')
library(modelr)
library(mice)
library(VIM)
library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(dplyr)
source('02_src/defined_functions.R')
data_ALL = read.csv('00_Data/data_All.csv'); data_ALL$X = NULL
data_ALL$MARRIAGE = ifelse(data_ALL$MARRIAGE == 1, 3, data_ALL$MARRIAGE) # Combine the marriage category
tmp.num = data_ALL$NUMBER
data_ALL$NUMBER = NULL
# Define Catogory Variables
data_ALL$SEX<-as.factor(data_ALL$SEX)
data_ALL$FAMINCOM5w<-as.factor(data_ALL$FAMINCOM5w)
data_ALL$SMOKE<-as.factor(data_ALL$SMOKE)
data_ALL$MARRIAGE<-as.factor(data_ALL$MARRIAGE)
data_ALL$education<-as.factor(data_ALL$education)
data_ALL$alcohol<-as.factor(data_ALL$alcohol)
data_ALL$CVD<-as.factor(data_ALL$CVD)
data_ALL$db<-as.factor(data_ALL$db)
data_ALL$HBP<-as.factor(data_ALL$HBP)
# Log-Transformed for exposure and response variable (i.e. outcome)
data_ALL$dietaryGlycidol <- log(data_ALL$dietaryGlycidol)
data_ALL$dietaryMCPD <- log(data_ALL$dietaryMCPD)
data_ALL$DHPMA_a <- log(data_ALL$DHPMA_a)
data_ALL = data_ALL[,c(dim(data_ALL)[2], 1:(dim(data_ALL)[2]-1))]
# Scaled Quantitive variables
data_ALL[,1:13]<- scale(data_ALL[,1:13],center=T,scale=T)
data_ALL$MCPD_GLY = data_ALL$dietaryGlycidol + data_ALL$dietaryMCPD
ks.test(data_ALL$dietaryGlycidol, data_ALL$dietaryMCPD)
data_ALL$dietaryGlycidol = NULL
data_ALL$dietaryMCPD = NULL
data_ALL$NUMBER = tmp.num
# Exclude outlier in the response variable.
list = c()
value <- data_ALL$MCPD_GLY
QL <- quantile(value, probs = 0.25)
QU <- quantile(value, probs = 0.75)
a <- which(value > QU + 1.5*(QU-QL))
b <- which(value < QL - 1.5*(QU-QL))
temp <- append(a,b)
list <- append(list, temp)
list <- list[!duplicated(list)]
data_ALL <- data_ALL[-list,]
## Expore Number List
write.csv(data_ALL$NUMBER, '01_Output_Results/All_selected_list.csv')
library(modelr)
library(mice)
library(VIM)
library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(dplyr)
source('02_src/defined_functions.R')
data_ALL = read.csv('00_Data/data_All.csv'); data_ALL$X = NULL
data_ALL$MARRIAGE = ifelse(data_ALL$MARRIAGE == 1, 3, data_ALL$MARRIAGE) # Combine the marriage category
tmp.num = data_ALL$NUMBER
data_ALL$NUMBER = NULL
lillie.test(data_ALL$MCPD_GLY)
library(nortest)
lillie.test(data_ALL$MCPD_GLY)
lillie.test(data_ALL$dietaryMCPD)
data_ALL$dietaryMCPD <- log(data_ALL$dietaryMCPD)
lillie.test(data_ALL$dietaryMCPD)
library(modelr)
library(mice)
library(VIM)
library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(dplyr)
source('02_src/defined_functions.R')
data_ALL = read.csv('00_Data/data_All.csv'); data_ALL$X = NULL
data_ALL$MARRIAGE = ifelse(data_ALL$MARRIAGE == 1, 3, data_ALL$MARRIAGE) # Combine the marriage category
tmp.num = data_ALL$NUMBER
data_ALL$NUMBER = NULL
# Scaled Quantitive variables
data_ALL[,1:13]<- scale(data_ALL[,1:13],center=T,scale=T)
lillie.test(data_ALL$MCPD_GLY)
lillie.test(data_ALL$dietaryMCPD)
hist(data_ALL$dietaryMCPD)
plot(data_ALL$dietaryMCPD)
qqnorm(data_ALL$dietaryMCPD)
library(modelr)
library(mice)
library(VIM)
library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(dplyr)
source('02_src/defined_functions.R')
data_ALL = read.csv('00_Data/data_All.csv'); data_ALL$X = NULL
data_ALL$MARRIAGE = ifelse(data_ALL$MARRIAGE == 1, 3, data_ALL$MARRIAGE) # Combine the marriage category
tmp.num = data_ALL$NUMBER
data_ALL$NUMBER = NULL
# Define Catogory Variables
data_ALL$SEX<-as.factor(data_ALL$SEX)
data_ALL$FAMINCOM5w<-as.factor(data_ALL$FAMINCOM5w)
data_ALL$SMOKE<-as.factor(data_ALL$SMOKE)
data_ALL$MARRIAGE<-as.factor(data_ALL$MARRIAGE)
data_ALL$education<-as.factor(data_ALL$education)
data_ALL$alcohol<-as.factor(data_ALL$alcohol)
data_ALL$CVD<-as.factor(data_ALL$CVD)
data_ALL$db<-as.factor(data_ALL$db)
data_ALL$HBP<-as.factor(data_ALL$HBP)
# Log-Transformed for exposure and response variable (i.e. outcome)
data_ALL$dietaryGlycidol <- log(data_ALL$dietaryGlycidol)
data_ALL$dietaryMCPD <- log(data_ALL$dietaryMCPD)
data_ALL$DHPMA_a <- log(data_ALL$DHPMA_a)
data_ALL = data_ALL[,c(dim(data_ALL)[2], 1:(dim(data_ALL)[2]-1))]
# Scaled Quantitive variables
data_ALL[,1:13]<- scale(data_ALL[,1:13],center=T,scale=T)
data_ALL$MCPD_GLY = data_ALL$dietaryGlycidol + data_ALL$dietaryMCPD
ks.test(data_ALL$dietaryGlycidol, data_ALL$dietaryMCPD)
data_ALL$dietaryGlycidol = NULL
data_ALL$dietaryMCPD = NULL
data_ALL$NUMBER = tmp.num
# Exclude outlier in the response variable.
list = c()
value <- data_ALL$MCPD_GLY
QL <- quantile(value, probs = 0.25)
QU <- quantile(value, probs = 0.75)
a <- which(value > QU + 1.5*(QU-QL))
b <- which(value < QL - 1.5*(QU-QL))
temp <- append(a,b)
list <- append(list, temp)
list <- list[!duplicated(list)]
data_ALL <- data_ALL[-list,]
## Expore Number List
write.csv(data_ALL$NUMBER, '01_Output_Results/All_selected_list.csv')
qqnorm(data_ALL$dietaryMCPD)
qqnorm(data_ALL$MCPD_GLY)
library(modelr)
library(mice)
library(VIM)
library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(dplyr)
source('02_src/defined_functions.R')
data_ALL = read.csv('00_Data/data_All.csv'); data_ALL$X = NULL
data_ALL$MARRIAGE = ifelse(data_ALL$MARRIAGE == 1, 3, data_ALL$MARRIAGE) # Combine the marriage category
tmp.num = data_ALL$NUMBER
data_ALL$NUMBER = NULL
qqnorm(data_ALL$dietaryMCPD)
# Scaled Quantitive variables
data_ALL[,1:13]<- scale(data_ALL[,1:13],center=T,scale=T)
qqnorm(data_ALL$dietaryMCPD)
