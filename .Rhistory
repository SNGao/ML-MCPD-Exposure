data_MCPD$alcohol<-as.factor(data_MCPD$alcohol)
data_MCPD$CVD<-as.factor(data_MCPD$CVD)
data_MCPD$db<-as.factor(data_MCPD$db)
data_MCPD$HBP<-as.factor(data_MCPD$HBP)
# Log-Transformed for exposure and response variable (i.e. outcome)
data_MCPD$dietaryMCPD <- log(data_MCPD$dietaryMCPD)
data_MCPD$DHPMA_a <- log(data_MCPD$DHPMA_a)
# Scaled Quantitive variables
data_MCPD[1:12]<- scale(data_MCPD[1:12],center=F,scale=T)
# Exclude outlier in the response variable.
list = c()
value <- data_MCPD$dietaryMCPD
QL <- quantile(value, probs = 0.25)
QU <- quantile(value, probs = 0.75)
a <- which(value > QU + 1.5*(QU-QL))
b <- which(value < QL - 1.5*(QU-QL))
temp <- append(a,b)
list <- append(list, temp)
list <- list[!duplicated(list)]
data_MCPD <- data_MCPD[-list,]
library(nortest)
norm.test = lillie.test(data_MCPD$dietaryMCPD)
pdf('01_Output_Results/Normality-test-MCPD.pdf')
hist_data = hist(data_MCPD$dietaryMCPD,
main = "Histogram of dietaryMCPD", xlab = "dietaryMCPD", col = "lightblue")
text(x = mean(range(data_MCPD$dietaryMCPD))*1.4,
y = max(hist_data$counts) * 0.8, paste0('P=',round(norm.test$p.value, 3)), col = "red", cex = 1.2)
dev.off()
data.raw = read.csv('00_Data/data_MCPD.csv') # Generated from STATA files
dat.table = data.raw[row.names(data_MCPD),]
dat.table$MARRIAGE = ifelse(dat.table$MARRIAGE == 1, 3, dat.table$MARRIAGE)
write.csv(as.numeric(row.names(dat.table)), '01_Output_Results/Selected_list.csv')
colnames(dat.table)
## Transform Variable Name
dat.table = dat.table |>
rename(Age = age,
DHPMA = DHPMA_a,
Smoking = SMOKE,
Income = FAMINCOM5w,
DB = db,
Married = MARRIAGE,
Drinking = alcohol,
Physical_Activity = MET) |>
mutate(SEX = factor(
SEX,
levels = c(1, 2),
labels = c("Men", "Women")
))
## Generate Table1 Summary
library(gtsummary)
library(flextable)
dat.table %>%
select(Age, education, Married, SEX,
Income, Smoking, Drinking,
CVD, DB, HBP, Physical_Activity,
BMI, DHPMA, dietaryMCPD,
BEANOILintake, PEANUTOIintake, LARDOILintake, totalenergy) %>%
tbl_summary(
by = "SEX",
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"
),
digits = list(
all_continuous() ~ c(2, 2),  # 保留两位小数
all_categorical() ~ c(0, 2)  # 保留两位小数的百分比
)) %>%
add_overall() %>%
add_p(test = list(all_continuous() ~ "aov",
all_categorical() ~ "chisq.test")) %>%
as_flex_table() %>%
save_as_docx(path = "01_Output_Results/Table1.docx")
model.MLR1 <-lm(dietaryMCPD ~ age+SEX+education+MARRIAGE+alcohol+SMOKE
+FAMINCOM5w
+DHPMA_a,
data = data_MCPD)
model.MLR2 <-lm(dietaryMCPD ~ age+SEX+education+MARRIAGE+alcohol+SMOKE
+FAMINCOM5w
+HEIGHT+BMI+CREATININE+MET+CVD+HBP+MET+db+HBP+WEIGHT
+DHPMA_a,
data = data_MCPD)
model.MLR3 <-lm(dietaryMCPD ~ age+SEX+education+MARRIAGE+alcohol+SMOKE
+FAMINCOM5w
+HEIGHT+BMI+CREATININE+MET+CVD+HBP+MET+db+HBP+WEIGHT
+totalenergy+BEANOILintake+PEANUTOIintake+LARDOILintake
+DHPMA_a,
data = data_MCPD)
MLR1.summary = broom::tidy(model.MLR1, conf.int = TRUE)
MLR2.summary = broom::tidy(model.MLR2, conf.int = TRUE)
MLR3.summary = broom::tidy(model.MLR3, conf.int = TRUE)
write.csv(MLR1.summary, '01_Output_Results/MLR1_output.csv')
write.csv(MLR2.summary, '01_Output_Results/MLR2_output.csv')
write.csv(MLR3.summary, '01_Output_Results/MLR3_output.csv')
# summary(model.MLR1)
# summary(model.MLR2)
# summary(model.MLR3)
set.seed(208)
pdf('01_Output_Results/Figure-Lasso.pdf')
library(glmnet)
x = model.matrix(dietaryMCPD~.,data_MCPD)
y = data_MCPD$dietaryMCPD
grid = 10^seq(5,-5,length=20)
lasso.model = glmnet(x,y, alpha=1, lambda=grid)
cv.out <- cv.glmnet(x,y,alpha=1)
bestlam <- cv.out$lambda.min
lam_1se <- cv.out$lambda.1se
lasso.pred <- predict(lasso.model, s = bestlam, newx = x)
lasso.coef = predict(lasso.model, type = 'coefficients', s = bestlam)
plot(cv.out)
plot(lasso.model)
dev.off()
lasso.coef.out = data.frame(as.matrix(lasso.coef))
write.csv(lasso.coef.out, '01_Output_Results/Lasso-Coefficients.csv') # Exclude variables whose s1 value is '.', WEIGHT
colinear.out = data.frame(vif(model.MLR3)) # No
colnames(colinear.out)[3] = 'GVIF^(1/(2*Df))'
write.csv(colinear.out, '01_Output_Results/CoLinear_Check.csv')
model.MLR4 <-lm(dietaryMCPD ~ age+SEX+education+MARRIAGE+alcohol+SMOKE
+FAMINCOM5w
+HEIGHT+BMI+CREATININE+MET+CVD+HBP+MET+db+HBP
+totalenergy+BEANOILintake+PEANUTOIintake+LARDOILintake
+DHPMA_a,
data = data_MCPD)
MLR4.summary = broom::tidy(model.MLR4, conf.int = TRUE)
write.csv(MLR4.summary, '01_Output_Results/MLR4_output(NoWEIGHT).csv')
summary(model.MLR4)
write.csv(data_MCPD, '00_Data/process_data.csv')
data_MCPD$WEIGHT = NULL
colnames(data_MCPD)
varList <- c("CREATININE","HEIGHT","BMI","age","BEANOILintake",
"PEANUTOIintake","LARDOILintake","MET","totalenergy",'db',
"MARRIAGE","SMOKE","SEX","FAMINCOM5w","CVD","HBP","alcohol","education")
## Interaction Check
results_BA_CES <- data.frame(Estimate = NA,
SE = NA,
T.value = NA,
P_value = NA,
R = NA)
for (var in varList){
formula = as.formula(paste0('dietaryMCPD~ DHPMA_a','+.+DHPMA_a:', var))
fit <- lm(formula, data_MCPD)
a = summary(fit); tmp = data.frame(a$coefficients)
colnames(tmp) = c('Estimate', 'SE', 'T.value', 'P_value')
tmp$R = a$r.squared
## Find Output Row Number
num1 = grepl('DHPMA_a', row.names(tmp))
num2 = grepl(var, row.names(tmp))
num.all = num1 | num2
results_BA_CES = rbind(results_BA_CES, tmp[num.all,])
}
results_BA_CES[-1,]
write.csv(results_BA_CES[-1,],
'01_Output_Results/MLR4_Interaction.csv')
order = order(results_BA_CES[grepl(':',row.names(results_BA_CES)),]$R, decreasing = TRUE)
results_BA_CES[grepl(':',row.names(results_BA_CES)),][order,]
model.gam1 <- lm(dietaryMCPD~ ns(CREATININE, df = 3) +ns(HEIGHT, df = 3)+ns(BMI, df = 3)
+ ns(age, df = 3)
+ ns(BEANOILintake)
# all interior knots match left boundary knot (df = 3~6)
# shoving 'interior' knots matching boundary knots to inside
+ ns(PEANUTOIintake)
# all interior knots match left boundary knot (df = 3~6)
# shoving 'interior' knots matching boundary knots to inside
+ ns(LARDOILintake)
# all interior knots match left boundary knot (df = 3~6)
# shoving 'interior' knots matching boundary knots to inside
+ ns(MET, df = 3)
+ ns(DHPMA_a, df = 3)
+ ns(totalenergy, df = 3)
+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE
+ HBP+alcohol+education
, data = data_MCPD)
GAM1.summary = summary(model.gam1)
write.csv(data.frame(GAM1.summary$coefficients), '01_Output_Results/GAM1-Check-NonLinear.csv')
model.gam2 <- lm(dietaryMCPD~ ns(CREATININE, df = 3) +ns(HEIGHT, df = 3) + BMI + age
+ ns(BEANOILintake)
# all interior knots match left boundary knot (df = 3~6)
# shoving 'interior' knots matching boundary knots to inside
+ ns(PEANUTOIintake)
# all interior knots match left boundary knot (df = 3~6)
# shoving 'interior' knots matching boundary knots to inside
+ ns(LARDOILintake)
# all interior knots match left boundary knot (df = 3~6)
# shoving 'interior' knots matching boundary knots to inside
+ ns(MET, df = 3)
+ ns(DHPMA_a, df = 3)
+ ns(totalenergy, df = 3)
+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE
+ HBP+alcohol+education
, data = data_MCPD)
# CREATININE,HEIGHT,BMI,MET and DHPMA don't show non-linearity characteristics.
GAM2.summary = summary(model.gam2)
GAM2.summary
write.csv(data.frame(GAM2.summary$coefficients), '01_Output_Results/GAM2-Performance.csv')
colnames(data_MCPD)
varList <- c("CREATININE","HEIGHT","BMI","age","BEANOILintake",
"PEANUTOIintake","LARDOILintake","MET","totalenergy",'db',
"MARRIAGE","SMOKE","SEX","FAMINCOM5w","CVD","HBP","alcohol","education")
## Interaction Check
nonlinear.var = c('CREATININE', 'HEIGHT', 'MET', 'totalenergy')
results_BA_CES <- data.frame(Estimate = NA,
SE = NA,
T.value = NA,
P_value = NA,
R = NA)
for (var in varList){
if (var %in% nonlinear.var){
formula = as.formula(paste0('dietaryMCPD~ns(CREATININE, df = 3) +ns(HEIGHT, df = 3) + BMI + age + ns(BEANOILintake) +  ns(BEANOILintake) + ns(PEANUTOIintake) + ns(LARDOILintake)+ ns(MET, df = 3) + ns(DHPMA_a, df = 3)+ ns(totalenergy, df = 3)+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE  + HBP+alcohol+education','+ns(DHPMA_a, df=2):ns(', var,', df = 3)'))
} else{
formula = as.formula(paste0('dietaryMCPD~ns(CREATININE, df = 3) +ns(HEIGHT, df = 3) + BMI + age + ns(BEANOILintake) +  ns(BEANOILintake) + ns(PEANUTOIintake) + ns(LARDOILintake)+ ns(MET, df = 3) + ns(DHPMA_a, df = 3)+ ns(totalenergy, df = 3)+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE  + HBP+alcohol+education','+ ns(DHPMA_a, df=2):', var))
}
fit <- lm(formula, data = data_MCPD)
a = summary(fit); tmp = data.frame(a$coefficients)
colnames(tmp) = c('Estimate', 'SE', 'T.value', 'P_value')
tmp$R = a$r.squared
## Find Output Row Number
num1 = grepl('DHPMA_a', row.names(tmp))
num2 = grepl(var, row.names(tmp))
num.all = num1 | num2
results_BA_CES = rbind(results_BA_CES, tmp[num.all,])
}
results_BA_CES[-1,]
write.csv(results_BA_CES[-1,],
'01_Output_Results/GAM_Interaction.csv')
order = order(results_BA_CES[grepl(':',row.names(results_BA_CES)),]$R, decreasing = TRUE)
results_BA_CES[grepl(':',row.names(results_BA_CES)),][order,]
colnames(data_MCPD)
varList <- c("CREATININE","HEIGHT","BMI","age","BEANOILintake",
"PEANUTOIintake","LARDOILintake","MET","totalenergy",'db',
"MARRIAGE","SMOKE","SEX","FAMINCOM5w","CVD","HBP","alcohol","education")
## Interaction Check
nonlinear.var = c('CREATININE', 'HEIGHT', 'MET', 'totalenergy')
results_BA_CES <- data.frame(Estimate = NA,
SE = NA,
T.value = NA,
P_value = NA,
R = NA)
for (var in varList){
if (var %in% nonlinear.var){
formula = as.formula(paste0('dietaryMCPD~ns(CREATININE, df = 3) +ns(HEIGHT, df = 3) + BMI + age + ns(BEANOILintake) +  ns(BEANOILintake) + ns(PEANUTOIintake) + ns(LARDOILintake)+ ns(MET, df = 3) + DHPMA_a+ ns(totalenergy, df = 3)+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE  + HBP+alcohol+education','+DHPMA_a:ns(', var,', df = 3)'))
} else{
formula = as.formula(paste0('dietaryMCPD~ns(CREATININE, df = 3) +ns(HEIGHT, df = 3) + BMI + age + ns(BEANOILintake) +  ns(BEANOILintake) + ns(PEANUTOIintake) + ns(LARDOILintake)+ ns(MET, df = 3) + DHPMA_a + ns(totalenergy, df = 3)+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE  + HBP+alcohol+education','+ DHPMA_a:', var))
}
fit <- lm(formula, data = data_MCPD)
a = summary(fit); tmp = data.frame(a$coefficients)
colnames(tmp) = c('Estimate', 'SE', 'T.value', 'P_value')
tmp$R = a$r.squared
## Find Output Row Number
num1 = grepl('DHPMA_a', row.names(tmp))
num2 = grepl(var, row.names(tmp))
num.all = num1 | num2
results_BA_CES = rbind(results_BA_CES, tmp[num.all,])
}
results_BA_CES[-1,]
write.csv(results_BA_CES[-1,],
'01_Output_Results/GAM_Interaction_Linear_DHPMA.csv')
order = order(results_BA_CES[grepl(':',row.names(results_BA_CES)),]$R, decreasing = TRUE)
results_BA_CES[grepl(':',row.names(results_BA_CES)),][order,]
GAM1.summary
library(modelr)
library(mice)
library(VIM)
library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(ParBayesianOptimization)
source('02_src/defined_functions.R')
data_MCPD = read.csv('00_Data/process_data.csv') # Generated from STATA files
data_MCPD$X = NULL
data_MCPD$WEIGHT = NULL
# str(data_MCPD)
# Define Catogory Variables
data_MCPD$SEX<-as.factor(data_MCPD$SEX)
data_MCPD$FAMINCOM5w<-as.factor(data_MCPD$FAMINCOM5w)
data_MCPD$SMOKE<-as.factor(data_MCPD$SMOKE)
data_MCPD$MARRIAGE<-as.factor(data_MCPD$MARRIAGE)
data_MCPD$education<-as.factor(data_MCPD$education)
data_MCPD$alcohol<-as.factor(data_MCPD$alcohol)
data_MCPD$CVD<-as.factor(data_MCPD$CVD)
data_MCPD$db<-as.factor(data_MCPD$db)
data_MCPD$HBP<-as.factor(data_MCPD$HBP)
cat_list = c('SEX', 'FAMINCOM5w', 'SMOKE', 'MARRIAGE', 'education', 'alcohol', 'CVD', 'db', 'HBP')
# Divide the data into training sets and test sets
df = data_MCPD
set.seed(0612)
train_index <- createDataPartition(df$dietaryMCPD, p = 0.7, list = FALSE)
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Prepare for data
X_train <- train_data[, -which(names(train_data) == "dietaryMCPD")]
y_train <- train_data[1]
X_test <- test_data[, -which(names(test_data) == "dietaryMCPD")]
y_test <- test_data[1]
hist(y_train$dietaryMCPD)
hist(y_test$dietaryMCPD)
ks.test(y_train$dietaryMCPD, y_test$dietaryMCPD)
data.raw = read.csv('00_Data/data_MCPD.csv') # Generated from STATA files
data.raw$MARRIAGE = ifelse(data.raw$MARRIAGE == 1, 3, data.raw$MARRIAGE)
selected_list = read.csv('01_Output_Results/Selected_list.csv'); selected_list$X = NULL
dat.table = data.raw[selected_list$x,]
dat.table$Label = NA
dat.table$Label[train_index] = 'Train'
dat.table$Label[-train_index] = 'Test'
colnames(dat.table)
## Transform Variable Name
dat.table = dat.table |>
rename(Age = age,
DHPMA = DHPMA_a,
Smoking = SMOKE,
Income = FAMINCOM5w,
DB = db,
Married = MARRIAGE,
Drinking = alcohol,
Physical_Activity = MET) |>
mutate(SEX = factor(
SEX,
levels = c(1, 2),
labels = c("Men", "Women")
))
dat.table %>%
select(Age, education, Married, SEX,Label,
Income, Smoking, Drinking,
CVD, DB, HBP, Physical_Activity,
BMI, DHPMA, dietaryMCPD,
BEANOILintake, PEANUTOIintake, LARDOILintake, totalenergy) %>%
tbl_summary(
by = "Label",
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"
),
digits = list(
all_continuous() ~ c(2, 2),
all_categorical() ~ c(0, 2)
)) %>%
add_overall() %>%
add_p(test = list(all_continuous() ~ "aov",
all_categorical() ~ "chisq.test")) %>%
as_flex_table() %>%
save_as_docx(path = "01_Output_Results/Table23-Train-Test.docx")
data_MCPD$WEIGHT = NULL
model.mlr <- lm(dietaryMCPD ~ age+SEX+education+MARRIAGE+alcohol+SMOKE
+FAMINCOM5w
+HEIGHT+BMI+CREATININE+MET+CVD+HBP+MET+db+HBP
+totalenergy+BEANOILintake+PEANUTOIintake+LARDOILintake
+DHPMA_a,
data = train_data)
# summary(model.mlr)
# Make predictions on the training set
train_pred_mlr <- predict(model.mlr, X_train)
train_perf_mlr <- defaultSummary(data.frame(obs = y_train$dietaryMCPD, pred = train_pred_mlr))
# Make predictions on the test set
test_pred_mlr <- predict(model.mlr, X_test)
test_perf_mlr <- defaultSummary(data.frame(obs = y_test$dietaryMCPD, pred = test_pred_mlr))
print(test_perf_mlr)
model.gam <- lm(dietaryMCPD~ns(CREATININE, df = 2) +ns(HEIGHT, df = 2)+BMI
+ age
+ ns(BEANOILintake)
+ ns(PEANUTOIintake)
+ ns(LARDOILintake)
+ ns(MET, df = 2)
+ ns(DHPMA_a, df = 2)
+ ns(totalenergy, df = 2)
+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE
+ HBP+alcohol+education
, data = train_data)
a = summary(model.gam)
# Make predictions on the training set
train_pred_gam <- predict(model.gam, train_data)
train_perf_gam <- defaultSummary(data.frame(obs = y_train$dietaryMCPD, pred = train_pred_gam))
# Make predictions on the test set
test_pred_gam <- predict(model.gam, test_data)
test_perf_gam <- defaultSummary(data.frame(obs = y_test$dietaryMCPD, pred = test_pred_gam))
print(test_perf_gam)
model.gam <- lm(dietaryMCPD~ns(CREATININE, df = 3) +ns(HEIGHT, df = 3)+BMI
+ age
+ ns(BEANOILintake)
+ ns(PEANUTOIintake)
+ ns(LARDOILintake)
+ ns(MET, df = 3)
+ ns(DHPMA_a, df = 3)
+ ns(totalenergy, df = 3)
+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE
+ HBP+alcohol+education
, data = train_data)
a = summary(model.gam)
# Make predictions on the training set
train_pred_gam <- predict(model.gam, train_data)
train_perf_gam <- defaultSummary(data.frame(obs = y_train$dietaryMCPD, pred = train_pred_gam))
# Make predictions on the test set
test_pred_gam <- predict(model.gam, test_data)
test_perf_gam <- defaultSummary(data.frame(obs = y_test$dietaryMCPD, pred = test_pred_gam))
print(test_perf_gam)
model.gam <- lm(dietaryMCPD~CREATININE + HEIGHT +BMI
+ ns(age, df = 3)
+ ns(BEANOILintake)
+ ns(PEANUTOIintake)
+ ns(LARDOILintake)
+ ns(MET, df = 3)
+ DHPMA_a
+ ns(totalenergy, df = 3)
+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE
+ HBP+alcohol+education
, data = train_data)
a = summary(model.gam)
# Make predictions on the training set
train_pred_gam <- predict(model.gam, train_data)
train_perf_gam <- defaultSummary(data.frame(obs = y_train$dietaryMCPD, pred = train_pred_gam))
# Make predictions on the test set
test_pred_gam <- predict(model.gam, test_data)
test_perf_gam <- defaultSummary(data.frame(obs = y_test$dietaryMCPD, pred = test_pred_gam))
print(test_perf_gam)
library(modelr)
library(mice)
library(VIM)
library(DMwR2)
library(rpart)
library(car)
library(splines)
library(gam)
library(caret)
library(e1071)
source('02_src/defined_functions.R')
data_MCPD = read.csv('00_Data/process_data.csv')
data_MCPD$X = NULL; data_MCPD$WEIGHT = NULL
Result_total = data.frame(model = c(0),
train_RMSE=c(0), train_R2=c(0), train_MAE=c(0),
test_RMSE=c(0), test_R2=c(0), test_MAE=c(0))
K = 5
set.seed(20240616)
folds <- createFolds(data_MCPD$dietaryMCPD, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
fold.test <- data_MCPD[folds[[i]], ]
fold.train <- data_MCPD[-folds[[i]], ]
# Train model
model.mlr <- lm(dietaryMCPD~., data = fold.train)
# Performance for training set
trainpred <- predict(model.mlr, newdata = fold.train)
temp.train <- defaultSummary(data.frame(obs = fold.train$dietaryMCPD, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(model.mlr, newdata = fold.test)
temp.test <- defaultSummary(data.frame(obs = fold.test$dietaryMCPD, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
# Extract R2, RMSE, and MAE of the test set
R2_MLR1.test <- result.test$R2
RMSE_MLR1.test <- result.test$RMSE
MAE_MLR1.test <- result.test$MAE
R2_MLR1.train <- result.train$R2
RMSE_MLR1.train <- result.train$RMSE
MAE_MLR1.train <- result.train$MAE
Result_total[1, ] <- c(
'MLR1',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
set.seed(20240616)
folds <- createFolds(data_MCPD$dietaryMCPD, k = K)
# Initialize the result data frame
result.train <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
result.test <- data.frame(RMSE = numeric(K), R2 = numeric(K), MAE = numeric(K))
for (i in 1:K) {
fold.test <- data_MCPD[folds[[i]], ]
fold.train <- data_MCPD[-folds[[i]], ]
# Train model
model.gam <- lm(dietaryMCPD~CREATININE + HEIGHT +BMI
+ ns(age, df = 3)
+ ns(BEANOILintake)
+ ns(PEANUTOIintake)
+ ns(LARDOILintake)
+ ns(MET, df = 3)
+ DHPMA_a
+ ns(totalenergy, df = 3)
+ MARRIAGE+SEX+FAMINCOM5w+CVD+SMOKE
+ HBP+alcohol+education
, data = fold.train)
# Performance for training set
trainpred <- predict(model.gam, newdata = fold.train)
temp.train <- defaultSummary(data.frame(obs = fold.train$dietaryMCPD, pred = trainpred))
result.train[i, ] <- c(temp.train["RMSE"], temp.train["Rsquared"], temp.train["MAE"])
# Performance for test set
testpred <- predict(model.gam, newdata = fold.test)
temp.test <- defaultSummary(data.frame(obs = fold.test$dietaryMCPD, pred = testpred))
result.test[i, ] <- c(temp.test["RMSE"], temp.test["Rsquared"], temp.test["MAE"])
}
# Extract R2, RMSE, and MAE of the test set
R2_GAM.train <- result.train$R2
RMSE_GAM.train <- result.train$RMSE
MAE_GAM.train <- result.train$MAE
R2_GAM.test <- result.test$R2
RMSE_GAM.test <- result.test$RMSE
MAE_GAM.test <- result.test$MAE
Result_total[2, ] <- c(
'GAM',
mean(result.train$RMSE),
mean(result.train$R2),
mean(result.train$MAE),
mean(result.test$RMSE),
mean(result.test$R2),
mean(result.test$MAE)
)
Result_total
