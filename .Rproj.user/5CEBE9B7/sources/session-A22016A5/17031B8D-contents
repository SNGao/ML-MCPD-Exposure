



setwd("/Users/gsn/Desktop/")
data_MCPD <- read.csv('data_MCPD.csv',header = TRUE)

pdf(file = 'MLR&GAM.pdf', width = 4, height = 3)



## SVR model
library(e1071)
model.svm <- svm(dietaryMCPD~., kernal = 'radial basis',type = 'eps-regression',data=data_MCPD)
summary(model.svm)
defaultSummary(data.frame(obs = data_MCPD$dietaryMCPD, pred = predict(model.svm, data = data_MCPD)))

## RF model
library(randomForest)
pdf('/Users/gsn/Desktop/rf.pdf')
model.RF <- randomForest(dietaryMCPD~., data=data_MCPD, importance = TRUE, ntree=500)
defaultSummary(data.frame(obs = data_MCPD$dietaryMCPD, pred = predict(model.RF, data = data_MCPD)))
importance(model.RF)
varImpPlot(model.RF) #MeanDecreaseGini
dev.off()
# 引入RF的显著性
# https://blog.csdn.net/woodcorpse/article/details/115302125
#library(rfPermute)
#model.RF <- rfPermute(dietaryMCPD~., data=data_MCPD,
#                      ntree = 500, nrep = 5, num.cores = 1,
#                      importance = TRUE)
#importance(model.RF)



## catboost model
# data_temp = data_MCPD
library(catboost)
coulumn_description_vector = c()
coulumn_description_vector = rep('numeric',11)
coulumn_description_vector[12:19] = rep('factor',8)
cat_features <- c(12:19)
for (i in cat_features){
  data_MCPD[,i] <- as.numeric(factor(data_MCPD[,i]))}

target = c(1)
cat_features <- c(10:16)
K=5
set.seed(1)
folds <- createFolds(y=data_MCPD$dietaryMCPD,k=K)
result.train <<- data.frame(RMSE=c(0), R2=c(0),MAE=c(0))
result.test <<- data.frame(RMSE=c(0), R2=c(0),MAE=c(0))
for (i in c(1:K)){
  fold.test <- data_MCPD[folds[[i]],]
  fold.train <- data_MCPD[-folds[[i]],]
  
  train_pool <- catboost.load_pool(data = fold.train[,-target], 
                                   label = as.matrix(fold.train[,target]))	
  test_pool <- catboost.load_pool(data = fold.test[,-target], 
                                  label = as.matrix(fold.test[,target]))	
  
  fit_params <- list(iterations = 300,	
                     thread_count = 10,
                     loss_function = 'RMSE',	
                     train_dir = 'train_dir',	
                     logging_level = 'Silent'	
  )	
  model.cat <- catboost.train(train_pool, test_pool, fit_params)
  
  trainpred <- catboost.predict(model.cat, train_pool)
  temp.train = defaultSummary(data.frame(obs = fold.train$dietaryMCPD,
                                         pred = trainpred))
  temp.train
  result.train <<- rbind(result.train[1:3],c(mean(temp.train[1]),
                                             mean(temp.train[2]),
                                             mean(temp.train[3])))
  # 测试集预测效果
  testpred <- catboost.predict(model.cat, test_pool)
  temp.test = defaultSummary(data.frame(obs = fold.test$dietaryMCPD,
                                        pred = testpred))
  temp.test
  
  result.test <<- rbind(result.test[1:3],c(mean(temp.test[1]),
                                           mean(temp.test[2]),
                                           mean(temp.test[3])))
}
mean(result.train[2:(K+1),2])
mean(result.test[2:(K+1),2]) 
R2_CAT <- result.test[2:(K+1),2]
RMSE_CAT <- result.test[2:(K+1),1]
MAE_CAT <- result.test[2:(K+1),3]
# 训练集、测试集平均结果
Result_total[8,1:7] = c('CAT',mean(result.train[2:(K+1),1]),
                        mean(result.train[2:(K+1),2]),
                        mean(result.train[2:(K+1),3]),
                        mean(result.test[2:(K+1),1]),
                        mean(result.test[2:(K+1),2]),
                        mean(result.test[2:(K+1),3]))
pdf('/Users/gsn/Desktop/CAT.pdf')
ActualvsPredict()
dev.off()

VIP_I_cat = catboost.get_feature_importance(model.cat, test_pool, type = 'Interaction')
VIP_cat = catboost.get_feature_importance(model.cat, test_pool, type = 'FeatureImportance')
VN_cat = colnames(data_MCPD)[-1]
write.csv(VIP_I_cat, '/Users/gsn/Desktop/VIP_I_cat.csv')
write.csv(VIP_cat, '/Users/gsn/Desktop/VIP_cat.csv')
write.csv(VN_cat, '/Users/gsn/Desktop/VN_cat.csv')




###### 绘图
library(ggplot2)
Result.Rsquare <- data.frame(R2_MLR1, R2_GAM, R2_SVR, R2_RF,
                             R2_CAT, R2_LGBM, R2_XGB)
Result.RMSE <- data.frame(RMSE_MLR1, RMSE_MLR2, RMSE_GAM, RMSE_SVR, RMSE_RF,
                             RMSE_CAT, RMSE_LGBM, RMSE_XGB)
Result.MAE <- data.frame(MAE_MLR1, MAE_MLR2, MAE_GAM, MAE_SVR, MAE_RF,
                             MAE_CAT, MAE_LGBM, MAE_XGB)

write.csv(Result.Rsquare,'Result.Rsquare.csv')
write.csv(Result.RMSE,'Result.RMSE.csv')
write.csv(Result.MAE,'Result.MAE.csv')
write.csv(Result_total,'Result_total.csv')


## 绘制箱型图
pdf('xx.pdf',width=9,height=6)
#ggplot(Result.Rsquare)
boxplot(Result.Rsquare, ylim=c(0.2,0.6)) 
dev.off()
## 将结果数据合并
Result2=data.frame()
label = c()
for (i in colnames(Result.Rsquare)){
  temp = rep(i,5)
  label = append(label, temp)
}
Result = Result.Rsquare
colnames(Result) = c(rep('Rsquare',8))

for (i in c(1:dim(Result.Rsquare)[2])){
  Result2 = rbind(Result2, Result[i])
}
Result2 = cbind(label, Result2)

## 绘制箱刑图1
pdf('xxx.pdf',width = 9,height = 6)
ggplot(Result2, aes(label, Rsquare))+
  geom_boxplot()+theme_bw()

## 绘制箱刑图2
attach(Result2)
boxplot(Result2$Rsquare~Result2$label)
points(Result2$Rsquare~factor(Result2$label))
detach(Result2)
dev.off()
## 导出作图数据
write.csv(Result.Rsquare, 'Result.Rsquare.csv')
write.csv(Result2, 'Result2.csv')

## xgboost变量重要性绘图
importance_matrix <- xgb.importance(model = fit_xgb_reg)
importance_matrix2 <- data.frame(importance_matrix)
print(importance_matrix)
xgb.plot.importance(importance_matrix = importance_matrix,
                    measure = 'Frequency')

write.csv(importance_matrix2, '/Users/gsn/Desktop/importance_matrix.csv')

## 最后一折测试集中Xgboost预测值与实际值的回归直线
library(ggplot2)
data_xgb_plot = data.frame(cbind(testpred, fold.test$dietaryMCPD))
colnames(data_xgb_plot) = c('predict', 'dietaryMCPD')

library(visreg)
model_1 <- lm(dietaryMCPD ~ predict, data = data_xgb_plot)
visreg(model_1)

ggplot(data_xgb_plot, aes(dietaryMCPD, predict)) +
  geom_point() +
  geom_smooth(method = "lm")

ggplot(data_xgb_plot, aes(dietaryMCPD, predict, color = predict)) + theme_bw() 
  + theme(panel.grid=element_blank()) + geom_point()scale_x_continuous(limits = c(1,16)) + stat_smooth(method = lm, se = TRUE) + theme(axis.title = element_text(size = 13, face = 'bold')) + labs(title = 'R = 0.46, P<1.627e-15', x = 'SFA concentrations', y = 'Predicted score', colour = 'Score') + theme(
  plot.title = element_text(size = 13, 
                            #family = 'Times New Roman', 
                            face = 'bold'),
  axis.text = element_text(size = 11, face = 'bold'))
ggsave('/Users/gsn/Desktop/sfa.TIFF',width = 4, height = 4)

dev.off()


#
library(Hmisc)
library(corrplot)
result.cor = rcorr(as.matrix(data_MCPD))
pdf('/Users/gsn/Desktop/cor.pdf')
corrplot(result.cor$r, type = "upper", tl.pos = "lu", tl.col = "black", tl.cex = 0.5)
corrplot(result.cor$r, p.mat = result.cor$P, type = "lower", method = "square", tl.pos = "n", add=T, sig.level = .1)
dev.off()